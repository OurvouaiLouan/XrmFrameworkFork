using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Microsoft.EntityFrameworkCore.Internal;
using Newtonsoft.Json;
using XrmFramework.Core;

namespace XrmFramework.Analyzers.Generators;

[Generator]
public class TableJsonDefinitionGenerator : BaseTableDefinitionGenerator
{
	protected override bool GenerateTableFiles => true;

	protected override void WriteTable(SourceProductionContext productionContext, TableCollection tables, Table table, HashSet<string> alreadyCreatedEnums)
	{
		var sb = new IndentedStringBuilder();

		sb.AppendLine("#if COMPILE_JSON");

        WriteHeaders(sb);

		sb.AppendLine($"const {table.LogicalName}Definition = {{");

		using (sb.Indent())
		{
			WriteEntityMetadata(sb, table);


            if (table.Columns.Any())
			{

			
                sb.AppendLine("Columns: {");
			using (sb.Indent())
			{
				var columns = table.Columns
					.Select(ToStringColumn)
					.ToList();

				columns.Take(columns.Count - 1)
					.ToList()
					.ForEach(c => sb.AppendLine(c));

				var lastColumn = columns.Last();

				sb.AppendLine(lastColumn.TrimEnd(','));

     //           if (table.Columns.Any())
     //           {
  			//		var sbColumn = new IndentedStringBuilder();
					//foreach (var col in table.Columns)
     //               {
     //                   WriteColumn(sbColumn, col);
     //               }
					//var columns = sbColumn.ToString().TrimEnd(',');
					//sbColumn.
					//sb.AppendLine(columns);
     //           }
            }
            }

            sb.AppendLine("},");

			sb.AppendLine("Enums: {");
			using (sb.Indent())
			{
				foreach (var optionSetEnum in table.Enums)
				{

					sb = WriteEnum(sb, optionSetEnum);

                }

                DeleteLastComa(sb,2);
            }



            sb.AppendLine("}");
        }

		sb.AppendLine("};");
		
		sb.AppendLine("#endif");


        //On crée le chemin pour cette table
        productionContext.AddSource($"{table.Name}Definition.json", SourceText.From(sb.ToString(),System.Text.Encoding.UTF8));
	}
	private string ToStringColumn(Column col)
	{
		return $"{col.Name}: \"{col.LogicalName}\",";

    }
	private IndentedStringBuilder WriteEnum(IndentedStringBuilder sb, OptionSetEnum optionSetEnum)
	{
		sb.AppendLine($"{optionSetEnum.Name}: {{");


        List<string> nameUse = new List<string>();
		using (sb.Indent())
		{
			foreach (var value in optionSetEnum.Values)
			{
				string name = ParseName(value.Name);

				sb.AppendLine($"{name}: {value.Value},");
            }


            DeleteLastComa(sb,3);
        }
        sb.AppendLine("},");

		return sb;

    }

	private void WriteColumn(IndentedStringBuilder sb, Column col)
	{
		sb.AppendLine($"{col.Name}: \"{col.LogicalName}\",");
	}

	private void WriteEntityMetadata(IndentedStringBuilder sb, Table table)
	{
		sb.AppendLine($"LogicalName: \"{table.LogicalName}\",");
		sb.AppendLine($"SchemaName: \"{table.Name}\",");
		sb.AppendLine($"CollectionName: \"{table.CollectionName}\",");
		sb.AppendLine($"LogicalCollectionName: \"{table.CollectionName}\",");
		sb.AppendLine($"PrimaryIdAttribute: \"{table.Columns.FirstOrDefault(c => c.PrimaryType   == PrimaryType.Id)?.LogicalName}\",");
		sb.AppendLine($"PrimaryNameAttribute: \"{table.Columns.FirstOrDefault(c => c.PrimaryType == PrimaryType.Name)?.LogicalName}\",");
	}

	private void WriteHeaders(IndentedStringBuilder sb)
	{
		sb.AppendLine("/*");
		sb.AppendLine(" * Auto generated by XrmFramework 2.0");
		sb.AppendLine(" * Do not edit directly this file");
		sb.AppendLine(" */");
	}

	private string ParseAllCharacterOfAWord(string word, string valideCharacters)
	{
		if ( String.IsNullOrEmpty(word)) return word;

		string finalWord = string.Concat(
			word
			.Where(charac => valideCharacters.Contains(charac))
			);

		return finalWord;
	}


    private string ParseFirstCharacterOfAWord(string word, string valideCharacters)
	{
		if (String.IsNullOrEmpty(word)) return word;
		if (valideCharacters.Contains(word[0])) return word;
		else return "_" + word;
	}

	private string ParseName(string name)
	{
		const string valideFirstCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

		const string valideCharacters = "0123456789_";



		var valideCharacters2 = valideFirstCharacters + valideCharacters;

		name = ParseFirstCharacterOfAWord(name, valideFirstCharacters);

		name = ParseAllCharacterOfAWord(name, valideCharacters2);


        return name;
	}

	private void DeleteLastComa(IndentedStringBuilder sb, int indentDepth)
	{

        string sbString = sb.ToString();

		sbString = sbString.TrimEnd('\n').TrimEnd('\r').TrimEnd(',');
		sb.Clear();
		for (int i = 0; i < indentDepth; i++)
		{
			sb.DecrementIndent();
		}
        sb.AppendLine(sbString);
		for (int i = 0; i < indentDepth; i++)
		{
            sb.IncrementIndent();
        }
    }
}
