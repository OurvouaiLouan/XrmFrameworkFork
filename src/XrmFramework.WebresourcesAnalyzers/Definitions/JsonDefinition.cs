using Microsoft.EntityFrameworkCore.Internal;

namespace XrmFramework.WebresourcesAnalyzers.Definitions
{
    internal class JsonDefinition
    {
        public readonly string logicalName;

        public readonly string schemaName;

        public readonly string collectionName;

        public readonly string logicalCollectionName;

        public readonly string primaryIdAttribute;

        public readonly string primaryNameAttribute;

        public readonly List<JsonColumn> columns;

        public readonly List<JsonEnum> enums;

        public JsonDefinition(string logicalName, 
                                string schemaName, 
                                string collectionName, 
                                string logicalCollectionName, 
                                string primaryIdAttribute, 
                                string primaryNameAttribute,
                                List<JsonColumn> columns,
                                List<JsonEnum> enums)
        {
            this.logicalName = logicalName;
            this.schemaName = schemaName;
            this.collectionName = collectionName;
            this.logicalCollectionName = logicalCollectionName;
            this.primaryIdAttribute = primaryIdAttribute;
            this.primaryNameAttribute = primaryNameAttribute;
            this.columns = columns;
            this.enums = enums;
        }

        public JsonDefinition()
        {
            this.logicalName = "";
            this.schemaName = "";
            this.collectionName = "";
            this.logicalCollectionName = "";
            this.primaryIdAttribute = "";
            this.primaryNameAttribute = "";
            this.columns = new List<JsonColumn>();
            this.enums = new List<JsonEnum>();
        }



        private void WriteColumns(IndentedStringBuilder sb)
        {


            sb.AppendLine("Columns: {");
            using (sb.Indent())
            {

                columns.Take(columns.Count - 1)
                    .ToList()
                    .ForEach(delegate (JsonColumn c)
                    {
                        sb.AppendLine($"{c.Title}: \"{c.Value}\",");
                    });

                var lastColumn = columns.Last();

                sb.AppendLine($"{lastColumn.Title}: \"{lastColumn.Value}\"");
            }

            if (enums.Any())
                sb.AppendLine("},");
            else
                sb.AppendLine("}");
        }





        private void WriteEnums(IndentedStringBuilder sb)
        {
            sb.AppendLine("Enums: {");

            using (sb.Indent())
            {
                enums.Take(enums.Count - 1)
                    .ToList()
                    .ForEach(delegate (JsonEnum e)
                    {
                        sb.AppendLine(e.Title + ": {");

                        using (sb.Indent())
                        {
                            WriteEnumValues(e.Value, sb);
                        }

                        sb.AppendLine("},");
                    });

                JsonEnum lastEnum = enums.Last();

                sb.AppendLine(lastEnum.Title + ": {");

                using (sb.Indent())
                {
                    WriteEnumValues(lastEnum.Value, sb);
                }

                sb.AppendLine("}");
            }

            sb.AppendLine("}");
        }

        private void WriteEnumValues(List<JsonEnumValue> enumValues,IndentedStringBuilder sb)
        {
            enumValues.Take(enumValues.Count - 1)
                .ToList()
                .ForEach(delegate (JsonEnumValue ev)
                {
                    sb.AppendLine($"{ev.Title}: {ev.Value},");
                });

            var lastev = enumValues.Last();

            sb.AppendLine($"{lastev.Title}: {lastev.Value}");
        }






        public IndentedStringBuilder WriteJson()
        {
            var sb = new IndentedStringBuilder();

            sb.AppendLine("#if COMPILE_JSON");

            sb.AppendLine("/*");
            sb.AppendLine(" * Auto generated by XrmFramework 2.0");
            sb.AppendLine(" * Do not edit directly this file");
            sb.AppendLine(" */");

            sb.AppendLine($"const {logicalName}Definition = {{");

            using (sb.Indent())
            {
                sb.AppendLine($"LogicalName: \"{logicalName}\",");
                sb.AppendLine($"SchemaName: \"{schemaName}\",");
                sb.AppendLine($"CollectionName: \"{collectionName}\",");
                sb.AppendLine($"LogicalCollectionName: \"{logicalCollectionName}\",");
                sb.AppendLine($"PrimaryIdAttribute: \"{primaryIdAttribute}\",");

                if (columns.Any() || enums.Any())
                    sb.AppendLine($"PrimaryNameAttribute: \"{primaryNameAttribute}\",");
                else
                    sb.AppendLine($"PrimaryNameAttribute: \"{primaryNameAttribute}\"");

                if (columns.Any()) WriteColumns(sb);

                if (enums.Any()) WriteEnums(sb);

            }

            sb.AppendLine("};");
            sb.AppendLine("#endif");

            return sb;

        }
    }

    public struct JsonColumn
    {
        public JsonColumn(string title, string value)
        {
            Title = title;
            Value = value;
        }

        public string Title { get; }
        public string Value { get; }
    }



    public struct JsonEnum
    {
        public JsonEnum(string title, List<JsonEnumValue> value)
        {
            Title = title;
            Value = value;
        }

        public string Title { get; }
        public List<JsonEnumValue> Value { get; }
    }

    public struct JsonEnumValue
    {
        public JsonEnumValue(string title, int value)
        {
            Title = title;
            Value = value;
        }

        public string Title { get; }
        public int Value { get; }
    }


}
